syntax = "proto3";

option go_package = "github.com/adammck/ranger/pkg/proto";

package ranger;

message RangeMeta {
  // Unique for every range.
  uint64 ident = 1;

  // Range of the keys in this range.
  bytes start = 2; // inclusive
  bytes end = 3; // exclusive
}

// Sent from the controller with Prepare.
//
// TODO: Should include the placement index in here, so the node can verify that
// the controller is talking about the same placement when it sees duplicates.
// Just in case the controller has gone mad and is trying to place multiple
// replicas of the same range on a single node.
message Placement {
  string node = 1;
  PlacementState state = 2;
}

// Proto of rangelet.LoadInfo and roster.LoadInfo
message LoadInfo {
  // Number of keys which this range contains.
  // Just for reporting? Not balancing?
  uint64 keys = 1;

  // Where the node would suggest that this range be split, in order for the
  // resulting ranges to be evenly loaded. Otherwise the mid-point between start
  // and end keys will be used, which is probably not an even split.
  repeated string splits = 2;
 
  // TODO: Generic load info? cpu/ram/network/disk?
  // TODO: Extra domain-specific info?
}

// TODO: Rename to RemoteRangeInfo, since this is the view from the remote.
message RangeInfo {
  // TODO: Do we need the whole meta here? Maybe ID is enough? Nice to confirm
  // range boundaries I guess.
  RangeMeta meta = 1;

  // The state which the range is currently in, according to the node.
  RangeNodeState state = 2;

  // LoadInfo informs the controller how much load this range is applying to the
  // node, relative to the other ranges on that node. The controller will use
  // this info to rebalance ranges.
  LoadInfo info = 3;
 }

// TODO: Rename to RemoteState, like the non-proto type.
// Keep synced with roster/api.RemoteState (in pkg/roster/state/remote_state.go)
enum RangeNodeState {
  UNKNOWN = 0;

  // Stable states
  INACTIVE = 1;
  ACTIVE = 2;

  // During transitions
  PREPARING = 3;    // Pending -> Inactive
  ACTIVATING = 4;   // Inactive -> Active
  DEACTIVATING = 5; // Active -> Inactive
  DROPPING = 6;     // Inactive -> NotFound

  // Special case: See roster.RemoteState
  NOT_FOUND = 7;
}

// This is only for debugging purposes, for now.
// Keep synced with ranje.RangeState (in pkg/ranje/range_state.go)
// TODO: Remove the prefix; the const is currently e.g. RangeState_RS_ACTIVE.
enum RangeState {
  RS_UNKNOWN = 0;
  RS_ACTIVE = 1;
  RS_SUBSUMING = 2;
  RS_OBSOLETE = 3;
}

// This is only for debugging purposes, for now.
// Keep synced with ranje.PlacementState (in pkg/ranje/placement_state.go)
enum PlacementState {
  PS_UNKNOWN = 0;
  PS_PENDING = 1;
  PS_INACTIVE = 2;
  PS_ACTIVE = 3;
  PS_MISSING = 5;
  PS_DROPPED = 6;
}
