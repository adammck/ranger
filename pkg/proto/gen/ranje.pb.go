// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.4
// source: ranje.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// TODO: Rename to RemoteState, like the non-proto type.
// Keep synced with roster/api.RemoteState (in pkg/roster/state/remote_state.go)
type RangeNodeState int32

const (
	RangeNodeState_UNKNOWN RangeNodeState = 0
	// Stable states
	RangeNodeState_INACTIVE RangeNodeState = 1
	RangeNodeState_ACTIVE   RangeNodeState = 2
	// During transitions
	RangeNodeState_PREPARING    RangeNodeState = 3 // Pending -> Inactive
	RangeNodeState_ACTIVATING   RangeNodeState = 4 // Inactive -> Active
	RangeNodeState_DEACTIVATING RangeNodeState = 5 // Active -> Inactive
	RangeNodeState_DROPPING     RangeNodeState = 6 // Inactive -> NotFound
	// Special case: See roster.RemoteState
	RangeNodeState_NOT_FOUND RangeNodeState = 7
)

// Enum value maps for RangeNodeState.
var (
	RangeNodeState_name = map[int32]string{
		0: "UNKNOWN",
		1: "INACTIVE",
		2: "ACTIVE",
		3: "PREPARING",
		4: "ACTIVATING",
		5: "DEACTIVATING",
		6: "DROPPING",
		7: "NOT_FOUND",
	}
	RangeNodeState_value = map[string]int32{
		"UNKNOWN":      0,
		"INACTIVE":     1,
		"ACTIVE":       2,
		"PREPARING":    3,
		"ACTIVATING":   4,
		"DEACTIVATING": 5,
		"DROPPING":     6,
		"NOT_FOUND":    7,
	}
)

func (x RangeNodeState) Enum() *RangeNodeState {
	p := new(RangeNodeState)
	*p = x
	return p
}

func (x RangeNodeState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RangeNodeState) Descriptor() protoreflect.EnumDescriptor {
	return file_ranje_proto_enumTypes[0].Descriptor()
}

func (RangeNodeState) Type() protoreflect.EnumType {
	return &file_ranje_proto_enumTypes[0]
}

func (x RangeNodeState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RangeNodeState.Descriptor instead.
func (RangeNodeState) EnumDescriptor() ([]byte, []int) {
	return file_ranje_proto_rawDescGZIP(), []int{0}
}

// This is only for debugging purposes, for now.
// Keep synced with ranje.RangeState (in pkg/ranje/range_state.go)
// TODO: Remove the prefix; the const is currently e.g. RangeState_RS_ACTIVE.
type RangeState int32

const (
	RangeState_RS_UNKNOWN   RangeState = 0
	RangeState_RS_ACTIVE    RangeState = 1
	RangeState_RS_SUBSUMING RangeState = 2
	RangeState_RS_OBSOLETE  RangeState = 3
)

// Enum value maps for RangeState.
var (
	RangeState_name = map[int32]string{
		0: "RS_UNKNOWN",
		1: "RS_ACTIVE",
		2: "RS_SUBSUMING",
		3: "RS_OBSOLETE",
	}
	RangeState_value = map[string]int32{
		"RS_UNKNOWN":   0,
		"RS_ACTIVE":    1,
		"RS_SUBSUMING": 2,
		"RS_OBSOLETE":  3,
	}
)

func (x RangeState) Enum() *RangeState {
	p := new(RangeState)
	*p = x
	return p
}

func (x RangeState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RangeState) Descriptor() protoreflect.EnumDescriptor {
	return file_ranje_proto_enumTypes[1].Descriptor()
}

func (RangeState) Type() protoreflect.EnumType {
	return &file_ranje_proto_enumTypes[1]
}

func (x RangeState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RangeState.Descriptor instead.
func (RangeState) EnumDescriptor() ([]byte, []int) {
	return file_ranje_proto_rawDescGZIP(), []int{1}
}

// This is only for debugging purposes, for now.
// Keep synced with ranje.PlacementState (in pkg/ranje/placement_state.go)
type PlacementState int32

const (
	PlacementState_PS_UNKNOWN  PlacementState = 0
	PlacementState_PS_PENDING  PlacementState = 1
	PlacementState_PS_INACTIVE PlacementState = 2
	PlacementState_PS_ACTIVE   PlacementState = 3
	PlacementState_PS_MISSING  PlacementState = 5
	PlacementState_PS_DROPPED  PlacementState = 6
)

// Enum value maps for PlacementState.
var (
	PlacementState_name = map[int32]string{
		0: "PS_UNKNOWN",
		1: "PS_PENDING",
		2: "PS_INACTIVE",
		3: "PS_ACTIVE",
		5: "PS_MISSING",
		6: "PS_DROPPED",
	}
	PlacementState_value = map[string]int32{
		"PS_UNKNOWN":  0,
		"PS_PENDING":  1,
		"PS_INACTIVE": 2,
		"PS_ACTIVE":   3,
		"PS_MISSING":  5,
		"PS_DROPPED":  6,
	}
)

func (x PlacementState) Enum() *PlacementState {
	p := new(PlacementState)
	*p = x
	return p
}

func (x PlacementState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlacementState) Descriptor() protoreflect.EnumDescriptor {
	return file_ranje_proto_enumTypes[2].Descriptor()
}

func (PlacementState) Type() protoreflect.EnumType {
	return &file_ranje_proto_enumTypes[2]
}

func (x PlacementState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlacementState.Descriptor instead.
func (PlacementState) EnumDescriptor() ([]byte, []int) {
	return file_ranje_proto_rawDescGZIP(), []int{2}
}

type RangeMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique for every range.
	Ident uint64 `protobuf:"varint,1,opt,name=ident,proto3" json:"ident,omitempty"`
	// Range of the keys in this range.
	Start []byte `protobuf:"bytes,2,opt,name=start,proto3" json:"start,omitempty"` // inclusive
	End   []byte `protobuf:"bytes,3,opt,name=end,proto3" json:"end,omitempty"`     // exclusive
}

func (x *RangeMeta) Reset() {
	*x = RangeMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ranje_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RangeMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RangeMeta) ProtoMessage() {}

func (x *RangeMeta) ProtoReflect() protoreflect.Message {
	mi := &file_ranje_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RangeMeta.ProtoReflect.Descriptor instead.
func (*RangeMeta) Descriptor() ([]byte, []int) {
	return file_ranje_proto_rawDescGZIP(), []int{0}
}

func (x *RangeMeta) GetIdent() uint64 {
	if x != nil {
		return x.Ident
	}
	return 0
}

func (x *RangeMeta) GetStart() []byte {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *RangeMeta) GetEnd() []byte {
	if x != nil {
		return x.End
	}
	return nil
}

// Sent from the controller with Prepare.
//
// TODO: Should include the placement index in here, so the node can verify that
// the controller is talking about the same placement when it sees duplicates.
// Just in case the controller has gone mad and is trying to place multiple
// replicas of the same range on a single node.
type Placement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node  string         `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	State PlacementState `protobuf:"varint,2,opt,name=state,proto3,enum=ranger.PlacementState" json:"state,omitempty"`
}

func (x *Placement) Reset() {
	*x = Placement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ranje_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Placement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Placement) ProtoMessage() {}

func (x *Placement) ProtoReflect() protoreflect.Message {
	mi := &file_ranje_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Placement.ProtoReflect.Descriptor instead.
func (*Placement) Descriptor() ([]byte, []int) {
	return file_ranje_proto_rawDescGZIP(), []int{1}
}

func (x *Placement) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

func (x *Placement) GetState() PlacementState {
	if x != nil {
		return x.State
	}
	return PlacementState_PS_UNKNOWN
}

// Proto of rangelet.LoadInfo and roster.LoadInfo
type LoadInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of keys which this range contains.
	// Just for reporting? Not balancing?
	Keys uint64 `protobuf:"varint,1,opt,name=keys,proto3" json:"keys,omitempty"`
	// Where the node would suggest that this range be split, in order for the
	// resulting ranges to be evenly loaded. Otherwise the mid-point between start
	// and end keys will be used, which is probably not an even split.
	Splits []string `protobuf:"bytes,2,rep,name=splits,proto3" json:"splits,omitempty"`
}

func (x *LoadInfo) Reset() {
	*x = LoadInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ranje_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadInfo) ProtoMessage() {}

func (x *LoadInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ranje_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadInfo.ProtoReflect.Descriptor instead.
func (*LoadInfo) Descriptor() ([]byte, []int) {
	return file_ranje_proto_rawDescGZIP(), []int{2}
}

func (x *LoadInfo) GetKeys() uint64 {
	if x != nil {
		return x.Keys
	}
	return 0
}

func (x *LoadInfo) GetSplits() []string {
	if x != nil {
		return x.Splits
	}
	return nil
}

// TODO: Rename to RemoteRangeInfo, since this is the view from the remote.
type RangeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO: Do we need the whole meta here? Maybe ID is enough? Nice to confirm
	// range boundaries I guess.
	Meta *RangeMeta `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// The state which the range is currently in, according to the node.
	State RangeNodeState `protobuf:"varint,2,opt,name=state,proto3,enum=ranger.RangeNodeState" json:"state,omitempty"`
	// LoadInfo informs the controller how much load this range is applying to the
	// node, relative to the other ranges on that node. The controller will use
	// this info to rebalance ranges.
	Info *LoadInfo `protobuf:"bytes,3,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *RangeInfo) Reset() {
	*x = RangeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ranje_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RangeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RangeInfo) ProtoMessage() {}

func (x *RangeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ranje_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RangeInfo.ProtoReflect.Descriptor instead.
func (*RangeInfo) Descriptor() ([]byte, []int) {
	return file_ranje_proto_rawDescGZIP(), []int{3}
}

func (x *RangeInfo) GetMeta() *RangeMeta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *RangeInfo) GetState() RangeNodeState {
	if x != nil {
		return x.State
	}
	return RangeNodeState_UNKNOWN
}

func (x *RangeInfo) GetInfo() *LoadInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

var File_ranje_proto protoreflect.FileDescriptor

var file_ranje_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x72, 0x61, 0x6e, 0x6a, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x72, 0x22, 0x49, 0x0a, 0x09, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x65, 0x6e, 0x64,
	0x22, 0x4d, 0x0a, 0x09, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x64,
	0x65, 0x12, 0x2c, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22,
	0x36, 0x0a, 0x08, 0x4c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6b,
	0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x73, 0x22, 0x86, 0x01, 0x0a, 0x09, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x2e, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x2c, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x72, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x72, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f,
	0x2a, 0x85, 0x01, 0x0a, 0x0e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x0a,
	0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x52,
	0x45, 0x50, 0x41, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x45, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x44,
	0x52, 0x4f, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54,
	0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x07, 0x2a, 0x4e, 0x0a, 0x0a, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x53, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x53, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x53, 0x5f, 0x53, 0x55, 0x42, 0x53,
	0x55, 0x4d, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x53, 0x5f, 0x4f, 0x42,
	0x53, 0x4f, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x03, 0x2a, 0x70, 0x0a, 0x0e, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x53,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x53,
	0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x53,
	0x5f, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x50,
	0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x53,
	0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x53,
	0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x06, 0x42, 0x25, 0x5a, 0x23, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x64, 0x61, 0x6d, 0x6d, 0x63, 0x6b,
	0x2f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ranje_proto_rawDescOnce sync.Once
	file_ranje_proto_rawDescData = file_ranje_proto_rawDesc
)

func file_ranje_proto_rawDescGZIP() []byte {
	file_ranje_proto_rawDescOnce.Do(func() {
		file_ranje_proto_rawDescData = protoimpl.X.CompressGZIP(file_ranje_proto_rawDescData)
	})
	return file_ranje_proto_rawDescData
}

var file_ranje_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_ranje_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_ranje_proto_goTypes = []interface{}{
	(RangeNodeState)(0), // 0: ranger.RangeNodeState
	(RangeState)(0),     // 1: ranger.RangeState
	(PlacementState)(0), // 2: ranger.PlacementState
	(*RangeMeta)(nil),   // 3: ranger.RangeMeta
	(*Placement)(nil),   // 4: ranger.Placement
	(*LoadInfo)(nil),    // 5: ranger.LoadInfo
	(*RangeInfo)(nil),   // 6: ranger.RangeInfo
}
var file_ranje_proto_depIdxs = []int32{
	2, // 0: ranger.Placement.state:type_name -> ranger.PlacementState
	3, // 1: ranger.RangeInfo.meta:type_name -> ranger.RangeMeta
	0, // 2: ranger.RangeInfo.state:type_name -> ranger.RangeNodeState
	5, // 3: ranger.RangeInfo.info:type_name -> ranger.LoadInfo
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_ranje_proto_init() }
func file_ranje_proto_init() {
	if File_ranje_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ranje_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RangeMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ranje_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Placement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ranje_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ranje_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RangeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ranje_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ranje_proto_goTypes,
		DependencyIndexes: file_ranje_proto_depIdxs,
		EnumInfos:         file_ranje_proto_enumTypes,
		MessageInfos:      file_ranje_proto_msgTypes,
	}.Build()
	File_ranje_proto = out.File
	file_ranje_proto_rawDesc = nil
	file_ranje_proto_goTypes = nil
	file_ranje_proto_depIdxs = nil
}
