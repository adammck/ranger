syntax = "proto3";

option go_package = "github.com/adammck/ranger/pkg/proto";

import "google/protobuf/timestamp.proto";
import "ranje.proto";

package ranger;

service Node {
  rpc Prepare (PrepareRequest) returns (PrepareResponse) {}
  rpc Activate (ServeRequest) returns (ServeResponse) {}
  rpc Deactivate (DeactivateRequest) returns (DeactivateResponse) {}
  rpc Drop (DropRequest) returns (DropResponse) {}

  // Controller wants to know the state of the node, including its ranges, and
  // (optionally) may extend the expiry of some ranges.
  // Proxy shouldn't call this; use Ranges instead.
  // TODO: Rename this now that it is not just fetching info.
  rpc Info (InfoRequest) returns (InfoResponse) {}

  // Proxy wants to know what it can forward to this node.
  // Controller shouldn't call this; use Info instead.
  rpc Ranges (RangesRequest) returns (stream RangesResponse) {}
}

message Parent {
  RangeMeta range = 1;

  // Range IDs in here may not appear in the PrepareRequest, because at some point
  // the history is pruned.
  repeated uint64 parent = 2;

  // TODO: This should probably be two fields, host and port? Or node ident?
  repeated Placement placements = 3;
}

message PrepareRequest {
  RangeMeta range = 1;

  // The range(s) which this range was created from, and the nodes where they
  // can currently be found. This is empty is the range is brand new. Nodes may
  // use this info to restore the current state of the range when accepting it.
  // TODO: Need nested parents here?
  repeated Parent parents = 3;
}

message PrepareResponse {
  // TODO: Return just the state instead, like ServeResponse.
  RangeInfo range_info = 1;
}

message ServeRequest {
  uint64 range = 1;
  bool force = 2;

  // The placement should be deactivated at this time, in order to enforce
  // at-most-n active ranges during network partitions (where the controller
  // can't contact the node to explicitly tell it to deactivate). During normal
  // network conditions, this will be constantly bumped via InfoRequest.
  google.protobuf.Timestamp expire = 3;
}

message ServeResponse {
  RangeNodeState state = 1;
}

message DeactivateRequest {
  uint64 range = 1;
}

message DeactivateResponse {
  RangeNodeState state = 1;
}

message DropRequest {
  uint64 range = 1;
  bool force = 2;
}

message DropResponse {
  RangeNodeState state = 1;
}

message InfoRequest {
}

message InfoResponse {
  repeated RangeInfo ranges = 1;

  // The nod wants the controller to remove all ranges from it. Probably because
  // it wants to shut down gracefully.
  bool wantDrain = 2;
}

message RangesRequest {
}

message RangesResponse {
  RangeMeta meta = 1;
  RangeNodeState state = 2;
}
